name: "Create Infra with Terraform"

on:
  pull_request:
    branches: main 

  workflow_dispatch:

env:
  WORKING_DIRECTORY: Terraform
  DEFAULT_BACKEND_TYPE: ${{vars.DEFAULT_BACKEND_TYPE}} # azurerm is supported
  DEFAULT_AZURE_LOGIN: ${{vars.DEFAULT_AZURE_LOGIN}} #OIDC in progress

permissions:
  id-token: write
  contents: read

jobs:
  scan-terraform-config:
    runs-on: ubuntu-latest
    name: Scan Terraform with Checov
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Run Checkov Scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ env.WORKING_DIRECTORY }}
          soft_fail: true # optional: do not return an error code if there are failed checks
          # check: CKV_AWS_1 # optional: run only a specific check_id. can be comma separated list
          # skip_check: CKV_AWS_2 # optional: skip a specific check_id. can be comma separated list
          # quiet: true # optional: display only failed checks
          # framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
          # output_format: sarif # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif
          # download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
          # log_level: DEBUG # optional: set log level. Default WARNING
          # config_file: path/this_file
          # baseline: cloudformation/.checkov.baseline # optional: Path to a generated baseline file. Will only report results not in the baseline.
          # container_user: 1000 # optional: Define what UID and / or what GID to run the container under to prevent permission issues

  deploy-azure-infra-terraform:
    name: Deploy to Azure with Terraform
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' }}
    needs: [scan-terraform-config]
    env: 
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}

    strategy:
      max-parallel: 1  # Limits to one concurrent job. Avoid stafe file lock
      matrix:
        project: [06-container-apps, 02-storage-account] # List of project folders

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Azure with Service Principal
        uses: Azure/login@v2
        if: ${{ env.DEFAULT_AZURE_LOGIN == 'SERVICE_PRINCIPAL' }}
        with:
          auth-type: SERVICE_PRINCIPAL
          creds: ${{ secrets.AZURE_CREDENTIALS }}  # Uses the AZURE_CREDENTIALS secret for login
          enable-AzPSSession: true  #Needed in order to use the credentials in other steps

        # Login with OIDC. https://github.com/Azure/login?tab=readme-ov-file#login-with-openid-connect-oidc-recommended
      - uses: azure/login@v2
        if: ${{ env.DEFAULT_AZURE_LOGIN == 'OIDC' }}
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
        
      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az account show

      # AzureRM Backend Configuration
      - name: AzureRM Terraform Backend
        uses: Azure/cli@v2
        env:
          # All of this are backend settings
          BACKEND_STORAGE_ACCOUNT_NAME: ${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
          BACKEND_RESOURCE_GROUP_NAME: ${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}
          BACKEND_CONTAINER_NAME: ${{ secrets.BACKEND_CONTAINER_NAME }}
          BACKEND_KEY: ${{ secrets.BACKEND_KEY }}
        if: ${{ env.DEFAULT_BACKEND_TYPE == 'azurerm' }}
        with:
          # Azure CLI version to be used to execute the script. If not provided, latest version is used
          inlineScript: |
            cd ${{ matrix.project }}
            echo "Directory updated: "
            pwd
            echo ""

            az version

            echo 'Create Resource Group'
            exist=$(az group exists --name $BACKEND_RESOURCE_GROUP_NAME)
            echo "Existe: $exist"
            if [ "$exist"="false" ]; then
              az group create --name $BACKEND_RESOURCE_GROUP_NAME --location westeurope
            else 
              az group show --name $BACKEND_RESOURCE_GROUP_NAME
            fi


            echo 'Create storage account'
            exist=$(az storage account show --name $BACKEND_STORAGE_ACCOUNT_NAME --resource-group $BACKEND_RESOURCE_GROUP_NAME)
            echo "Existe: $exist"
            if [ -z "$exist" ]; then
              az storage account create --name $BACKEND_STORAGE_ACCOUNT_NAME \
                --resource-group $BACKEND_RESOURCE_GROUP_NAME \
                --sku Standard_LRS \
                --encryption-services blob
            else 
              az storage account show --name $BACKEND_STORAGE_ACCOUNT_NAME --resource-group $BACKEND_RESOURCE_GROUP_NAME
            fi


            echo 'Create Blob container'
            exist=$(az storage container show --name $BACKEND_CONTAINER_NAME --account-name $BACKEND_STORAGE_ACCOUNT_NAME)
            if [ -z "$exist" ]; then
              az storage container create \
                --resource-group $BACKEND_RESOURCE_GROUP_NAME \
                --account-name $BACKEND_STORAGE_ACCOUNT_NAME \
                --name $BACKEND_CONTAINER_NAME 
            else 
              az storage container show \
                --account-name $BACKEND_STORAGE_ACCOUNT_NAME \
                --name $BACKEND_CONTAINER_NAME 
            fi

            # Generate backend.tf file
            if [ ! -f ./backend.tf ]; then
              echo "backend.tf not found!"


              cat <<EOT > backend.tf
            terraform {
              backend "azurerm" {
                resource_group_name   = "$BACKEND_RESOURCE_GROUP_NAME"
                storage_account_name  = "$BACKEND_STORAGE_ACCOUNT_NAME"
                container_name        = "$BACKEND_CONTAINER_NAME"
                key                   = "$BACKEND_KEY"
              } 
            }
            EOT
              cat backend.tf
            fi

      # HCP Terraform Backend Configuration
      - name: HCP Terraform Backend
        env:
          HCP_ORGANIZATION: ${{ secrets.HCP_ORGANIZATION }}
          HCP_WORKSPACE: ${{ secrets.HCP_WORKSPACE }}
        if: ${{ env.DEFAULT_BACKEND_TYPE == 'hcp' }}
        run: |
          cd ${{ matrix.project }}
          echo "Directory updated: "
          pwd
          echo ""

          if [ ! -f ./backend.tf ]; then
            echo "backend.tf not found!"


            cat <<EOT > backend.tf
          terraform {
            cloud {
              organization = "$HCP_ORGANIZATION"

              workspaces {
                name = "$HCP_WORKSPACE"
              }
            }
          }
          EOT
            cat backend.tf
          fi

      # Install the latest version of Terraform CLI
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3.1.2

      - name: Terraform Init
        run: |
          cd ${{ matrix.project }}
          echo "Directory updated: "
          pwd
          echo ""

          # Initialize a new or existing Terraform working directory by creating initial files, 
          # loading any remote state, downloading modules, etc.
          if [ ! -f ./backend.tf ]; then
            echo "backend.tf not found!"
          else
            cat backend.tf
          fi
          terraform init -upgrade -input=false 

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        id: format
        run: |
          cd ${{ matrix.project }}
          echo "Directory updated: "
          pwd
          echo ""
          
          terraform fmt
          #terraform fmt -check
        continue-on-error: true

      - name: Terraform Plan / Apply
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          cd ${{ matrix.project }}
          echo "Directory updated: "
          pwd
          echo ""

          terraform plan -out tfplan -input=false -var="subscription_id=${{ env.ARM_SUBSCRIPTION_ID }}"
          terraform apply "tfplan"

          # # show the tfplan file
          # terraform show -json tfplan
          # terraform show -json tfplan >> tfplan.json
          # # Format tfplan.json file
          # terraform show -json tfplan | jq '.' > tfplan.json
          # 
          # # show only the changes
          # cat tfplan.json | jq '[.resource_changes[] | {type: .type, name: .change.after.name, actions: .change.actions[]}]' 
          # cat tfplan.json | jq -r '(.resource_changes[] | [.change.actions[], .type, .change.after.name]) | @tsv'
      